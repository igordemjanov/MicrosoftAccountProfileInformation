name: $(Year:yyyy).$(Month).$(DayOfMonth).$(rev:r)

resources:
- repo: self
  clean: true

trigger:
    branches:
        include:
        - master
        - feature/*
        - bug/*
        exclude:
        - dummy/*
    paths:
        include:
        - /Application
        - /NotificationService

phases:

- phase: Phase_1
  displayName: Phase Windows
  condition: succeeded()
  
  queue:
    name: Hosted VS2017
    demands: npm

  variables:
    angular_version: '7.0.0'

  steps:
  
  # Perform Tokens Replacement
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: Replace
    inputs:
      rootDirectory: Application/Source/Configurations
      targetFiles: vapid.configuration.ts

  # Perform npm Install
  - task: Npm@1
    displayName: 'Install'
    inputs:
      workingDir: Application
      verbose: false

  # Perform Angular Tests
  - task: Npm@1
    displayName: 'Test'
    inputs:
      workingDir: Application
      command: custom
      verbose: false
      customCommand: 'test'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))   

  # Attach Test Report to Azure Pipeline
  - task: PublishTestResults@2
    displayName: 'Report Tests'
    inputs:
      testRunner: NUnit
      testResultsFiles: Application/Reports/Results.xml
      mergeTestResults: true
      testRunTitle: 'Microsoft Account Profile Information'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))   

  # Attach Coverage Report to Azure Pipeline
  - task: PublishCodeCoverageResults@1
    displayName: 'Report Coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/Application/Reports/Coverage/cobertura-coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/Application/Reports/Coverage'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest')) 

  # Perform Angular Build
  - task: Npm@1
    displayName: 'Build'
    inputs:
      workingDir: Application
      command: custom
      verbose: false
      customCommand: 'run build'

  # Copy Build Output
  - task: CopyFiles@2
    displayName: 'Copy'
    inputs:
      SourceFolder: Application/Distributions
      Contents: |
       **
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true
      flattenFolders: false
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))

  # Attach Build Output to Azure Pipeline
  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: Drop
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))


- phase: Phase_2
  displayName: Phase Windows
  condition: succeeded()
  
  queue:
    name: Hosted VS2017

  variables:
    function_version: '2.0'

  steps:
  
  # Perform Tokens Replacement
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: Replace
    inputs:
      rootDirectory: Application/Source/Configurations
      targetFiles: vapid.configuration.ts

  # Perform .Net Core Build
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '**/*.csproj'

  # Perform .Net Core Test
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: 'NotificationService/MSAccountPushSubscription.Tests/*.csproj'

  # Perform .Net Core Publish
  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: false
      projects: '**/*.csproj'
 